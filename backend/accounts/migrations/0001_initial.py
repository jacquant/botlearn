# Generated by Django 3.1 on 2020-08-09 20:31

import accounts.managers
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('mail', models.EmailField(max_length=255, unique=True, verbose_name='Adresse e-mail')),
                ('last_name', models.CharField(max_length=40, verbose_name='Nom')),
                ('first_name', models.CharField(max_length=30, verbose_name='Prénom')),
                ('student', models.BooleanField(blank=True, default=True, verbose_name='étudiant')),
                ('student_card', models.PositiveIntegerField(blank=True, null=True, unique=True, validators=[django.core.validators.MinValueValidator(20000000), django.core.validators.MaxValueValidator(21000000)])),
                ('eid', models.CharField(blank=True, max_length=12, unique=True, verbose_name='Eid étudiant')),
                ('anonymous', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, verbose_name='administrateur')),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'utilisateur',
            },
            managers=[
                ('objects', accounts.managers.UserManager()),
            ],
        ),
    ]
