# All configuration for plugins and other utils is defined here.
# Read more about `setup.cfg`:
# https://docs.python.org/3/distutils/configfile.html


# === Linter configuration ===
# You can reuse this configuration in your own projects.
# See: https://wemake-python-stylegui.de/en/latest/pages/usage/integrations/nitpick.html

[flake8]
# Base flake8 configuration:
# https://flake8.pycqa.org/en/latest/user/configuration.html
format = wemake
show-source = True
statistics = False
doctests = True

# Plugins:
max-complexity = 6
max-line-length = 79
enable-extensions = G
inline-quotes = double
# Self settings:
max-imports = 16

# Excluding some directories:
exclude =
  .git
  __pycache__
  .venv
  .eggs
  *.egg
  # These folders contain code badly written for reasons:
  # Project spefic, do not copy.
  tests/fixtures/**
  tests/**/snapshots/**
  */migrations/*.py
  # File used as a template
  sandbox/templates/Python/main.py

# Exclude some pydoctest checks globally:
ignore = D100, D104, D401, W504, RST303, RST304, DAR103, DAR203, WPS226, WPS432, WPS115, C812

per-file-ignores =
  # These function names are part of 3d party API:
  wemake_python_styleguide/visitors/ast/*.py: N802
  # These modules should contain a lot of classes:
  wemake_python_styleguide/violations/*.py: WPS202
  # Eval is a complex task:
  wemake_python_styleguide/logic/safe_eval.py: WPS232
  # This module should contain magic numbers:
  wemake_python_styleguide/options/defaults.py: WPS432
  # Checker has a lot of imports:
  wemake_python_styleguide/checker.py: WPS201
  # Allows mypy type hinting, `Ellipsis`` usage, multiple methods:
  wemake_python_styleguide/types.py: D102, WPS214, WPS220, WPS428
  # There are multiple fixtures, `assert`s, and subprocesses in tests:
  tests/*.py: S101, S105, S404, S603, S607, WPS211, WPS226, WPS323
  # Docs can have the configuration they need:
  docs/conf.py: WPS407
  # Pytest fixtures
  tests/plugins/*.py: WPS442
  # Django apps
  */apps.py: F401, WPS433, WPS201
  # Django __init__
  **/__init__.py: WPS412, WPS422, WPS410
  # Celery need __future__
  memoire/celery.py: WPS422
  # Django settings mutable
  memoire/settings.py: WPS407
  # Sandbox need to print
  sandbox/management/commands/Docker/Python/linter.py: WPS421
  # Django views use list methods
  **/views/*.py: WPS125
  # Bot views
  bot/views.py: WPS326



[isort]
# .isort.cfg
# Python ‘import’ statement sorter (isort) configuration for this code base.
# Documentation: <URL:https://github.com/timothycrosley/isort/wiki/isort-Settings>.

[settings]

# Maximum length (columns) for a line of program code.
line_length = 79

# Number of blank lines to separate imports from following statements.
lines_after_imports = 2

# Filenames that ‘isort’ should not process.
skip =

# Names of sections that group import statements.
# The order in this sequence specifies the order the sections should appear.
sections =
    FUTURE
    STDLIB
    FRAMEWORK
    THIRDPARTY
    FIRSTPARTY
    LOCALFOLDER

# Name of section for any import statement of a package not known to ‘isort’.
default_section = FIRSTPARTY

# Package names that are known for the ‘FRAMEWORK’ section.
known_framework = django, celery

# Package names that are known for the ‘THIRDPARTY’ section.
known_third_party = django_rest_passwordreset, rest_framework, chatterbot

# Package names that are known for the ‘FIRSTPARTY’ section.
known_first_party = dput

# Text for indentation of continuation lines.
indent = '    '

# The multi-line import statement style (integer code).
# See the ‘isort’ documentation for the meaning of each code.
multi_line_output = 3

# Sort imports by length (not alphanumeric)?
length_sort = false

# Add a trailing comma on the list of ‘from’ import names?
include_trailing_comma = true

# For continuation lines, wrap lines in parenthesis?
use_parentheses = true

# Sort ‘from … import’ statements before ‘import’ statements?
# This is not the ideal behaviour; see the issue reported at
# <URL:https://github.com/timothycrosley/isort/issues/609>.
from_first = false

# Force multiple names imported with ‘from’ to be separate statements?
force_single_line = false

# Force ‘from’ imports to be grid wrapped regardless of line length?
force_grid_wrap = true

# Format import statements as a visually-balanced grid?
balanced_wrapping = false

# Combine an ‘import … as …’ onto the same line?
combine_as_imports = true



[darglint]
# darglint configuration:
# https://github.com/terrencepreilly/darglint
strictness = long


# === Internal tools ===
# You are not interested in anything beyond this line.

[tool:pytest]
# py.test configuration: http://doc.pytest.org/en/latest/customize.html
norecursedirs = tests/fixtures *.egg .eggs dist build docs .tox .git __pycache__

filterwarnings =
  ignore::DeprecationWarning

addopts =
  --strict
  --doctest-modules
  --cov=wemake_python_styleguide
  --cov-branch
  --cov-report=term-missing:skip-covered
  --cov-report=html
  --cov-report=xml
  --cov-fail-under=100


[coverage:run]
# Coverage configuration: https://coverage.readthedocs.io/

# We don't need to cover some files. They are fully checked with mypy.
# And don't contain any logic.
omit =
  wemake_python_styleguide/types.py

# Here we specify plugins for coverage to be used:
plugins =
  coverage_conditional_plugin

[coverage:coverage_conditional_plugin]
# Here we specify our pragma rules:
rules =
  "sys_version_info < (3, 8)": py-lt-38
  "sys_version_info >= (3, 8)": py-gte-38


[mypy]
# The mypy configurations: http://bit.ly/2zEl9WI
allow_redefinition = False
check_untyped_defs = True
disallow_untyped_decorators = True
disallow_any_explicit = True
disallow_any_generics = True
disallow_untyped_calls = True
ignore_errors = False
ignore_missing_imports = True
implicit_reexport = False
local_partial_types = True
strict_optional = True
strict_equality = True
no_implicit_optional = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unused_configs = True
warn_unreachable = True
warn_no_return = True

[mypy-wemake_python_styleguide.compat.nodes]
# We allow explicit `Any` only in this file, because of the compatibility:
disallow_any_explicit = False

[mypy-wemake_python_styleguide.logic.safe_eval]
# We allow explicit `Any` only in this file, because that's what it does:
disallow_any_explicit = False


[doc8]
# doc8 configuration: https://pypi.org/project/doc8/
ignore-path = docs/_build
max-line-length = 79
sphinx = True